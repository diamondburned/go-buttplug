// Code generated by ./internal/cmd/genschema. DO NOT EDIT.

package buttplug

{{ define "imports" }}
{{ if eq (len .) 1 }}
import "{{ index . 0 }}"
{{ else }}
import (
	{{ range . }}
	"{{ . }}"
	{{ end }}
)
{{ end }}
{{ end }}

{{ define "messages" }}
// MessageType identifies a message type in a Messages object. It is also the
// object key in the Messages object.
type MessageType string

const (
	{{ range .Fields -}}
	{{ .GoName }}Message MessageType = "{{ .SchemaName }}"
	{{ end -}}
)

// Message is an interface ethat all messages will satisfy. All types that are
// inside MessageType will implement the interface. Inside this type declaration
// lists all types that will satisfy the interface.
//
// These types satisfy this interface:
//
{{ range .Fields -}}
//    - {{ .GoName }}
{{ end -}}
//
type Message interface {
	// MessageID returns the message's ID, or 0 if the message is a system
	// message.
	MessageID() ID
	// SetMessageID sets the message ID field. This is used for sending.
	SetMessageID(ID)
	// MessageType returns the message's type (object key).
	MessageType() MessageType
}

// Messages is the large messages object that's passed around.
type Messages map[MessageType]Message

{{ range .Fields -}}
{{ $recv := FirstLetter .GoName }}

// MessageID implements Message.
func ({{ $recv }} *{{ .GoName }}) MessageID() ID { return ID({{ $recv }}.ID) }

// SetMessageID implements Message.
func ({{ $recv }} *{{ .GoName }}) SetMessageID(id ID) {
	{{ $recv }}.ID = {{ (index .ObjectType.Fields 0).GoType }}(id)
}

// MessageType implements Message.
func ({{ $recv }} *{{ .GoName }}) MessageType() MessageType { return {{ .GoName }}Message }
{{ end -}}

var knownMessages = map[MessageType]func() Message {
	{{ range .Fields -}}
	{{ .GoName }}Message: func() Message { return &{{ .GoName }}{} },
	{{ end -}}
}

// RegisterMessage registers a new message type. It call the constructor once to
// know the message type.
func RegisterMessage(new func() Message) {
	msg := new()
	knownMessages[msg.MessageType()] = new
}

// CreateMessages creates a Messages object from the given messages.
func CreateMessages(msgs ...Message) Messages {
	obj := make(Messages, len(msgs))
	for _, msg := range msgs {
		obj[msg.MessageType()] = msg
	}
	return obj
}

{{ end }}

{{ define "integer" }}
{{ Comment .Description 0 }}
type {{ .GoName }} int // {{ .LimitString }}
{{ end }}

{{ define "number" }}
{{ Comment .Description 0 }}
type {{ .GoName }} float64 // {{ .LimitString }}
{{ end }}

{{ define "string" }}
{{ Comment .Description 0 }}
type {{ .GoName }} string
{{ end }}

{{ define "array" }}
{{ Comment .Description 0 }}
type {{ .GoName }} {{ .GoType }}
{{ end }}

{{ define "object" }}
{{ Comment .Description 0 }}
type {{ .GoName }} {{ .RawGoType }}
{{ end }}

{{ define "boolean" }}
{{ Comment .Description 0 }}
type {{ .GoName }} bool
{{ end }}
